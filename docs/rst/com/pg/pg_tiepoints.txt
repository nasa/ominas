pg_tiepoints.pro
===================================================================================================





________________________________________________________________________________________________________________________

pg_tiepoints


 NAME:
       pg_tiepoints


 PURPOSE:
       Computes tiepoint image offsets.


 CATEGORY:
       NV/PG


 CALLING SEQUENCE:
       tie_ptd = pg_tiepoints(cd=cd, bx=bx, body_pts=body_pts, ptd)


 ARGUMENTS:
  INPUT:
   ptd:         POINT containing the image points.

 KEYWORDS:
  INPUT:
         cd:	Camera descriptor.

         bx:	Body descriptor; can be GLOBE or RING.

        gbx:	Globe descriptor for each globe in image instead of
		specifying bx.

        dkx:	Disk descriptor for each globe in image instead of
		specifying bx.

	  gd:	Generic descriptor.  If given, the descriptor inputs
		are taken from this structure if not explicitly given.

	  dd:	Data descriptor containing a generic descriptor to use
		if gd not given.

   body_pts:	Array of np column vectors giving the body-frame coordinates
		for each tie point.  If not given, then the given geometry
		is used to compute it.


  OUTPUT:
   body_pts: 	Array of np column vectors giving the body-frame coordinates
		for each tie point.  If this keyword is given as an input,
		then no output is generated.

 EXAMPLE:
  1) Manually select a set of tiepoints in a set of images and fit
     a pointing offset:

	ndd = n_elements(dd)
	for i=0, ndd-1 do ptd[i] = pg_select_points(dd[i], /ptd)

	body_pts = 0
	for i=0, ndd-1 do $
	 begin &$
	  tie_ptd = pg_tiepoints(cd=cd[i], bx=pd[i], ptd[i], body_pts=body_pts) &$
	  tpcoeff = pg_ptscan_coeff(tie_ptd, fix=[2]) &$
	  dxy = pg_fit(tpcoeff) &$
	  pg_repoint, dxy, 0d, cd=cd[i] &$
	 end

     In the above example, the first image is used as a reference;
     because body_pts is initially undefined, those points are computed
     for the first image, but not subsequently.  Instead, the subsequent
     images will have a nonzero offset stored in the tie_ptd structure,
     which are then used by pg_ptscan_coeff to compute fit coefficients.


 STATUS:
       Complete


 MODIFICATION HISTORY:
       Written by:     Spitale, 8/2006


________________________________________________________________________________________________________________________







